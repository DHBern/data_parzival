# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
# Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths: '**.xml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  # Setting an environment variable with the value of a configuration variable
  host_url: ${{ vars.HOST_URL }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37
        with:
          include_all_old_new_renamed_files: true
          output_renamed_files_as_deleted_and_added: true
          dir_names_max_depth: 0
          files: |
            **.xml
      
      # Logs the user in and puts the JSessionID-cookie in the jar
      - name: Login
        if: ${{ steps.changed-files.outputs.any_modified }}
        env:
          USER: ${{ secrets.USER }}
          PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          curl -X 'POST' \
          '${host_url}/api/login' \
          -H 'accept: application/json' \
          -H 'Content-Type: multipart/form-data' \
          -F 'user=${USER}' \
          -F 'password=${PASSWORD}' \
          --cookie-jar 'cookies.txt'

      # Uploads files (Added, Copied, Modified and Renamed Files)
      - name: ACMR
        if: ${{ steps.changed-files.outputs.any_changed }}
        run: |
          curl_command="curl -X 'POST' \
          '$host_url/api/upload' \
          -H 'accept: application/json' \
          -H 'Content-Type: multipart/form-data' \
          -b 'cookies.txt'"
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            curl_command="$curl_command -F 'files[]=@$file;type=text/xml'"
          done
          echo "$curl_command"
          
          
      # Deletes files
      - name: D
        if: ${{ steps.changed-files.outputs.any_deleted }}
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            curl -X 'DELETE' '$host_url/api/document/$file'
          done

      # Deletes the old files when a file was renamed.
      - name: R
        if: ${{ steps.changed-files.outputs.all_old_new_renamed_files_count }} > 0
        run: |
          for file in ${{ steps.changed-files.outputs.all_old_new_renamed_files }}; do
            echo $file
            curl -X 'DELETE' '$host_url/api/document/$file'
          done
