name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: ["main", "5-exist-git-sync"]
    paths: "**.xml"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Setting an environment variable with the value of a configuration variable
  host_url: ${{ vars.HOST_URL }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: |
          echo $EVENT_CONTEXT

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37
        with:
          separator: ","
          include_all_old_new_renamed_files: true
          output_renamed_files_as_deleted_and_added: true
          dir_names_max_depth: 0
          quotepath: false
          files: |
            **.xml

      # Logs the user in and puts the JSessionID-cookie in the jar
      - name: Login
        # fromJSON converts the string to a boolean
        if: fromJSON(steps.changed-files.outputs.any_modified)
        env:
          USER: ${{ secrets.USER }}
          PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          curl -X 'POST' \
          "${host_url}/api/login" \
          -H 'accept: application/json' \
          -H 'Content-Type: multipart/form-data' \
          -F "user=${USER}" \
          -F "password=${PASSWORD}" \
          --cookie-jar 'cookies.txt'

      # Uploads files (Added, Copied, Modified and Renamed Files)
      - name: ACMR
        if: fromJSON(steps.changed-files.outputs.any_changed)
        run: |
          # Split the comma-separated list of filenames into an array
          IFS="," read -ra files_array <<< "${{ steps.changed-files.outputs.all_changed_files }}"
          curl_command="curl -X 'POST' \
          '${host_url}/api/upload' \
          -H 'accept: application/json' \
          -H 'Content-Type: multipart/form-data' \
          -b 'cookies.txt' \
          -i"
          for file in "${files_array[@]}"; do
            curl_command="${curl_command} -F 'files[]=@\"${file}\";type=text/xml'"
          done
          echo $curl_command
          eval "$curl_command"

      # Deletes files (in case of a deletion and a rename)
      - name: DR
        if: fromJSON(steps.changed-files.outputs.any_deleted)
        run: |
          sudo apt-get install -y jq
          # Split the comma-separated list of filenames into an array
          IFS="," read -ra files_array <<< "${{ steps.changed-files.outputs.deleted_files }}"
          for file in "${files_array[@]}"; do
            # url-encode the basename of the file with jq
            filename=$(basename "$file" | jq -Rr '@uri' )
            echo "running this command: 'curl -X 'DELETE' '${host_url}/api/document/${filename}''"
            curl -X 'DELETE' \
            "${host_url}/api/document/${filename}" \
            -b 'cookies.txt' \
            -i
          done
